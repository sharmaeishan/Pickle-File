# -*- coding: utf-8 -*-
"""Case study Simple Linear Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/devzohaib/Simple-Linear-Regression/blob/master/Case_study_Simple_Linear_Regression.ipynb
"""

import pandas as pd
import numpy as np
import pickle
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Reading csv file from github repo
url  = "https://raw.githubusercontent.com/devzohaib/Simple-Linear-Regression/master/tvmarketing.csv"
advertising = pd.read_csv(url)

"""Now, let's check the structure of the advertising dataset."""

# Display the first 5 rows
advertising.head()

# Display the last 5 rows
advertising.tail()

# Let's check the columns
advertising.info()

# Check the shape of the DataFrame (rows, columns)
advertising.shape

# Let's look at some statistical information about the dataframe.
advertising.describe()

"""# Perfroming Simple Linear Regression"""

# Putting feature variable to X
X = advertising['TV']

# Print the first 5 rows
X.head()

# Putting response variable to y
y = advertising['Sales']

# Print the first 5 rows
y.head()

"""## Splitting Data into Training and Testing Sets"""

#random_state is the seed used by the random number generator, it can be any integer.


X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7 , random_state=0000)

print(type(X_train))
print(type(X_test))
print(type(y_train))
print(type(y_test))

train_test_split
#Press Tab+Shift to read the documentation

print(X_train.shape)
print(y_train.shape)
print(X_test.shape)
print(y_test.shape)

# Convert the pandas DataFrames to NumPy arrays first
X_train_np = X_train.values  # Convert to NumPy array
X_test_np = X_test.values    # Convert to NumPy array

# Use np.newaxis to add an extra dimension
X_train_expanded = X_train_np[:, np.newaxis]
X_test_expanded = X_test_np[:, np.newaxis]

# Print shapes to verify the dimensionality change
print(f"X_train original shape: {X_train_np.shape}")
print(f"X_train new shape: {X_train_expanded.shape}")
print(f"X_test original shape: {X_test_np.shape}")
print(f"X_test new shape: {X_test_expanded.shape}")

print(X_train_expanded.shape)
print(y_train.shape)
print(X_test_expanded.shape)
print(y_test.shape)

"""## Performing Linear Regression"""

# import LinearRegression from sklearn


# Representing LinearRegression as lr(Creating LinearRegression Object)
lr = LinearRegression()

# Fit the model using lr.fit()
lr.fit(X_train_expanded, y_train)

"""## Predictions"""

# Making predictions on the testing set
y_pred = lr.predict(X_test_expanded)

type(y_pred)

print(y_pred)

mse = mean_squared_error(y_test, y_pred)

r_squared = r2_score(y_test, y_pred)

print('Mean_Squared_Error :' ,mse)
print('r_square_value :',r_squared)

# Save the model to a pickle file
model_filename = 'Linear_Regression.pkl'
with open(model_filename, 'wb') as file:
    pickle.dump(lr, file)

print(f"Linear Regression model has been saved as {model_filename}")